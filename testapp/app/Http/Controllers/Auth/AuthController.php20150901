<?php

namespace App\Http\Controllers\Auth;
use Auth;
use App\User;
use Validator;
use Illuminate\Contracts\Auth\Guard; 
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;
use Illuminate\Support\Facades\Input;
use Laravel\Socialite\Contracts\Factory as Socialite;

class AuthController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Registration & Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users, as well as the
    | authentication of existing users. By default, this controller uses
    | a simple trait to add these behaviors. Why don't you explore it?
    |
    */

    use AuthenticatesAndRegistersUsers, ThrottlesLogins;

    /**
     * Create a new authentication controller instance.
     *
     * @return void
     */
    private $socialite;
     private $auth;
    public function __construct(Socialite $socialite ,Guard $auth)
    {
         $this->middleware('guest', ['except' => 'getLogout']);
         $this->socialite = $socialite;
    }




       public function getSocialAuth($provider=null)
       {
           if(!config("services.$provider")) abort('404'); 
           //just to handle providers that doesn't exist
           return $this->socialite->with($provider)->redirect();
       }

       public function getSocialAuthCallback($provider=null)
       {
          if($user = $this->socialite->with($provider)->user())
          {
             dd($user);
          }
          else
          {
             return 'something went wrong';
          }
       }
     //protected $redirectPath = '/dashboard';
    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => 'required|max:255',
            'email' => 'required|email|max:255|unique:users',
            'password' => 'required|confirmed|min:6',
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => bcrypt($data['password']),
        ]);
    }

    public function authenticate()
    {
        $eventFormData = Input::all();
        @extract($eventFormData);
        $passwordhas = md5($password);
        $auth = Auth::attempt(['email' => $email, 'password' => $passwordhas]);
        print_r($auth);
       
    }

   
}
